#include "printer.h"

#ifdef _WIN32
#include <windows.h>
#include <iostream>

class WindowsPrinter : public Printer {
public:
    void sendPrintJob(const std::string &printerName, const std::string &job) override {
        HANDLE hPrinter;
        DOC_INFO_1 docInfo;
        DWORD dwJob;
        DWORD dwBytesWritten;

        std::cout << "Attempting to open printer: " << printerName << std::endl;
        if (OpenPrinter(const_cast<char*>(printerName.c_str()), &hPrinter, NULL)) {
            std::cout << "Printer opened successfully." << std::endl;
            docInfo.pDocName = const_cast<char*>("My Document");
            docInfo.pOutputFile = NULL;
            docInfo.pDatatype = const_cast<char*>("RAW");

            std::cout << "Starting document..." << std::endl;
            dwJob = StartDocPrinter(hPrinter, 1, (LPBYTE)&docInfo);
            if (dwJob > 0) {
                std::cout << "Document started successfully." << std::endl;
                if (StartPagePrinter(hPrinter)) {
                    std::cout << "Writing to printer..." << std::endl;
                    std::string fullJob = "Sample Document\n\n" + job + "\f"; // Add text to the job and form feed
                    if (WritePrinter(hPrinter, (LPVOID)fullJob.c_str(), fullJob.size(), &dwBytesWritten)) {
                        std::cout << "Print job sent successfully." << std::endl;
                    } else {
                        std::cerr << "Failed to write to printer. Error: " << GetLastError() << std::endl;
                    }
                    if (!EndPagePrinter(hPrinter)) {
                        std::cerr << "Failed to end page. Error: " << GetLastError() << std::endl;
                    }
                } else {
                    std::cerr << "Failed to start page. Error: " << GetLastError() << std::endl;
                }
                if (!EndDocPrinter(hPrinter)) {
                    std::cerr << "Failed to end document. Error: " << GetLastError() << std::endl;
                }
            } else {
                std::cerr << "Failed to start document. Error: " << GetLastError() << std::endl;
            }
            ClosePrinter(hPrinter);
        } else {
            std::cerr << "Failed to open printer. Error: " << GetLastError() << std::endl;
        }
    }
};
#else
#include <cups/cups.h>
#include <iostream>

class CUPSPrinter : public Printer {
public:
    void sendPrintJob(const std::string &printerName, const std::string &job) override {
        cups_dest_t *dests, *dest;
        int num_dests = cupsGetDests(&dests);
        dest = cupsGetDest(printerName.c_str(), NULL, num_dests, dests);

        if (dest == NULL) {
            std::cerr << "Printer not found: " << printerName << std::endl;
            cupsFreeDests(num_dests, dests);
            return;
        }

        cups_option_t *options = NULL;
        int num_options = 0;
        num_options = cupsAddOption(CUPS_COPIES, "1", num_options, &options);

        std::cout << "Sending job to printer: " << printerName << std::endl;
        int job_id = cupsPrintFile(printerName.c_str(), "-", "My Document", num_options, options);

        if (job_id == 0) {
            std::cerr << "Failed to print job. Error: " << cupsLastErrorString() << std::endl;
        } else {
            std::cout << "Print job sent successfully. Job ID: " << job_id << std::endl;
        }

        cupsFreeOptions(num_options, options);
        cupsFreeDests(num_dests, dests);
    }
};
#endif

Printer* Printer::create() {
#ifdef _WIN32
    return new WindowsPrinter();
#else
    return new CUPSPrinter();
#endif
}